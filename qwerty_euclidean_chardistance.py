# This script computes the mean Euclidean distance between successive bigrams in a given string and a given keyboard layout (e.g QWERTY).
# It aims to establish the likelihood that a random-like string was generated by a human,
# as opposed to a true random or pseudo-random algorithm.
# Lawrence Alexander @LawrenceA_UK

import numpy as np
import math

def compute_euclidean(input_string,keyboard_matrix):
    ''' Takes a non-empty STRING of a-z,0-9 chars, and keyboard layout LIST (matrix) as input '''
    ''' Returns positive FLOAT to two decimal places'''
    input_string = input_string.lower()    
    
    # Isolate each bigram token in input string
    e_distance_vector = []    
    bigram_pointer = 2
    for x in range(len(input_string)):    
        if len(input_string[bigram_pointer-2:bigram_pointer]) == 2:
            bigram = input_string[bigram_pointer-2:bigram_pointer]        
            
            # Get matrix coordinates for each character in the bigram
            y_axis = 0
            first_char_coordinates = ''
            second_char_coordinates = ''
            
            for keyboard_row in keyboard_matrix:
                if bigram[0] in keyboard_row:
                    first_char_coordinates = (keyboard_row.index(bigram[0]),y_axis)
                    
                if bigram[1] in keyboard_row:
                    second_char_coordinates = (keyboard_row.index(bigram[1]),y_axis)
                    
                # Calculate Euclidean distance between each character pair and add to list   
                if first_char_coordinates and second_char_coordinates:                
                    bigram_coordinates = (first_char_coordinates,second_char_coordinates)
                    x1 = bigram_coordinates[0][0]
                    x2 = bigram_coordinates[1][0]
                    y1 = bigram_coordinates[0][1]
                    y2 = bigram_coordinates[1][1]
                    e_distance = math.sqrt((x1-x2)**2+(y1-y2)**2)                
                y_axis += 1 
            e_distance_vector.append(e_distance)
        bigram_pointer = bigram_pointer + 2 
        
    return round(np.mean(e_distance_vector),2)   

# Set keyboard layout
keyboard_matrix = [['1','2','3','4','5','6','7','8','9','0'],
                   ['q','w','e','r','t','y','u','i','o','p'],
          ['a','s','d','f','g','h','j','k','l'],
          ['z','x','c','v','b','n','m']]

input_string = "jbu7rtduklyuf"
print compute_euclidean(input_string=input_string,keyboard_matrix=keyboard_matrix)